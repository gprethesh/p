{
  "version": 3,
  "sources": ["../../@greymass/miniaes/src/aes.asm.js", "../../@greymass/miniaes/src/utils.ts", "../../@greymass/miniaes/src/aes.ts", "../../@greymass/miniaes/src/cbc.ts"],
  "sourcesContent": ["/* eslint-disable */\n/**\n * @file {@link http://asmjs.org Asm.js} implementation of the {@link https://en.wikipedia.org/wiki/Advanced_Encryption_Standard Advanced Encryption Standard}.\n * @author Artem S Vybornov <vybornov@gmail.com>\n * @license MIT\n */\n export var AES_asm = function () {\n  \"use strict\";\n\n  /**\n   * Galois Field stuff init flag\n   */\n  var ginit_done = false;\n\n  /**\n   * Galois Field exponentiation and logarithm tables for 3 (the generator)\n   */\n  var gexp3, glog3;\n\n  /**\n   * Init Galois Field tables\n   */\n  function ginit() {\n    gexp3 = [],\n      glog3 = [];\n\n    var a = 1, c, d;\n    for (c = 0; c < 255; c++) {\n      gexp3[c] = a;\n\n      // Multiply by three\n      d = a & 0x80, a <<= 1, a &= 255;\n      if (d === 0x80) a ^= 0x1b;\n      a ^= gexp3[c];\n\n      // Set the log table value\n      glog3[gexp3[c]] = c;\n    }\n    gexp3[255] = gexp3[0];\n    glog3[0] = 0;\n\n    ginit_done = true;\n  }\n\n  /**\n   * Galois Field multiplication\n   * @param {number} a\n   * @param {number} b\n   * @return {number}\n   */\n  function gmul(a, b) {\n    var c = gexp3[(glog3[a] + glog3[b]) % 255];\n    if (a === 0 || b === 0) c = 0;\n    return c;\n  }\n\n  /**\n   * Galois Field reciprocal\n   * @param {number} a\n   * @return {number}\n   */\n  function ginv(a) {\n    var i = gexp3[255 - glog3[a]];\n    if (a === 0) i = 0;\n    return i;\n  }\n\n  /**\n   * AES stuff init flag\n   */\n  var aes_init_done = false;\n\n  /**\n   * Encryption, Decryption, S-Box and KeyTransform tables\n   *\n   * @type {number[]}\n   */\n  var aes_sbox;\n\n  /**\n   * @type {number[]}\n   */\n  var aes_sinv;\n\n  /**\n   * @type {number[][]}\n   */\n  var aes_enc;\n\n  /**\n   * @type {number[][]}\n   */\n  var aes_dec;\n\n  /**\n   * Init AES tables\n   */\n  function aes_init() {\n    if (!ginit_done) ginit();\n\n    // Calculates AES S-Box value\n    function _s(a) {\n      var c, s, x;\n      s = x = ginv(a);\n      for (c = 0; c < 4; c++) {\n        s = ((s << 1) | (s >>> 7)) & 255;\n        x ^= s;\n      }\n      x ^= 99;\n      return x;\n    }\n\n    // Tables\n    aes_sbox = [],\n      aes_sinv = [],\n      aes_enc = [[], [], [], []],\n      aes_dec = [[], [], [], []];\n\n    for (var i = 0; i < 256; i++) {\n      var s = _s(i);\n\n      // S-Box and its inverse\n      aes_sbox[i] = s;\n      aes_sinv[s] = i;\n\n      // Ecryption and Decryption tables\n      aes_enc[0][i] = (gmul(2, s) << 24) | (s << 16) | (s << 8) | gmul(3, s);\n      aes_dec[0][s] = (gmul(14, i) << 24) | (gmul(9, i) << 16) | (gmul(13, i) << 8) | gmul(11, i);\n      // Rotate tables\n      for (var t = 1; t < 4; t++) {\n        aes_enc[t][i] = (aes_enc[t - 1][i] >>> 8) | (aes_enc[t - 1][i] << 24);\n        aes_dec[t][s] = (aes_dec[t - 1][s] >>> 8) | (aes_dec[t - 1][s] << 24);\n      }\n    }\n\n    aes_init_done = true;\n  }\n\n  /**\n   * Asm.js module constructor.\n   *\n   * <p>\n   * Heap buffer layout by offset:\n   * <pre>\n   * 0x0000   encryption key schedule\n   * 0x0400   decryption key schedule\n   * 0x0800   sbox\n   * 0x0c00   inv sbox\n   * 0x1000   encryption tables\n   * 0x2000   decryption tables\n   * 0x3000   reserved (future GCM multiplication lookup table)\n   * 0x4000   data\n   * </pre>\n   * Don't touch anything before <code>0x400</code>.\n   * </p>\n   *\n   * @alias AES_asm\n   * @class\n   * @param foreign - <i>ignored</i>\n   * @param buffer - heap buffer to link with\n   * @type any\n   */\n  var wrapper = function (foreign, buffer) {\n    // Init AES stuff for the first time\n    if (!aes_init_done) aes_init();\n\n    // Fill up AES tables\n    var heap = new Uint32Array(buffer);\n    heap.set(aes_sbox, 0x0800 >> 2);\n    heap.set(aes_sinv, 0x0c00 >> 2);\n    for (var i = 0; i < 4; i++) {\n      heap.set(aes_enc[i], (0x1000 + 0x400 * i) >> 2);\n      heap.set(aes_dec[i], (0x2000 + 0x400 * i) >> 2);\n    }\n\n    /**\n     * Calculate AES key schedules.\n     * @instance\n     * @memberof AES_asm\n     * @param {number} ks - key size, 4/6/8 (for 128/192/256-bit key correspondingly)\n     * @param {number} k0 - key vector components\n     * @param {number} k1 - key vector components\n     * @param {number} k2 - key vector components\n     * @param {number} k3 - key vector components\n     * @param {number} k4 - key vector components\n     * @param {number} k5 - key vector components\n     * @param {number} k6 - key vector components\n     * @param {number} k7 - key vector components\n     */\n    function set_key(ks, k0, k1, k2, k3, k4, k5, k6, k7) {\n      var ekeys = heap.subarray(0x000, 60),\n        dkeys = heap.subarray(0x100, 0x100 + 60);\n\n      // Encryption key schedule\n      ekeys.set([k0, k1, k2, k3, k4, k5, k6, k7]);\n      for (var i = ks, rcon = 1; i < 4 * ks + 28; i++) {\n        var k = ekeys[i - 1];\n        if ((i % ks === 0) || (ks === 8 && i % ks === 4)) {\n          k = aes_sbox[k >>> 24] << 24 ^ aes_sbox[k >>> 16 & 255] << 16 ^ aes_sbox[k >>> 8 & 255] << 8 ^ aes_sbox[k & 255];\n        }\n        if (i % ks === 0) {\n          k = (k << 8) ^ (k >>> 24) ^ (rcon << 24);\n          rcon = (rcon << 1) ^ ((rcon & 0x80) ? 0x1b : 0);\n        }\n        ekeys[i] = ekeys[i - ks] ^ k;\n      }\n\n      // Decryption key schedule\n      for (var j = 0; j < i; j += 4) {\n        for (var jj = 0; jj < 4; jj++) {\n          var k = ekeys[i - (4 + j) + (4 - jj) % 4];\n          if (j < 4 || j >= i - 4) {\n            dkeys[j + jj] = k;\n          } else {\n            dkeys[j + jj] = aes_dec[0][aes_sbox[k >>> 24]]\n              ^ aes_dec[1][aes_sbox[k >>> 16 & 255]]\n              ^ aes_dec[2][aes_sbox[k >>> 8 & 255]]\n              ^ aes_dec[3][aes_sbox[k & 255]];\n          }\n        }\n      }\n\n      // Set rounds number\n      asm.set_rounds(ks + 5);\n    }\n\n    // create library object with necessary properties\n    var stdlib = {Uint8Array: Uint8Array, Uint32Array: Uint32Array};\n\n    var asm = function (stdlib, foreign, buffer) {\n      \"use asm\";\n\n      var S0 = 0, S1 = 0, S2 = 0, S3 = 0,\n        I0 = 0, I1 = 0, I2 = 0, I3 = 0,\n        N0 = 0, N1 = 0, N2 = 0, N3 = 0,\n        M0 = 0, M1 = 0, M2 = 0, M3 = 0,\n        H0 = 0, H1 = 0, H2 = 0, H3 = 0,\n        R = 0;\n\n      var HEAP = new stdlib.Uint32Array(buffer),\n        DATA = new stdlib.Uint8Array(buffer);\n\n      /**\n       * AES core\n       * @param {number} k - precomputed key schedule offset\n       * @param {number} s - precomputed sbox table offset\n       * @param {number} t - precomputed round table offset\n       * @param {number} r - number of inner rounds to perform\n       * @param {number} x0 - 128-bit input block vector\n       * @param {number} x1 - 128-bit input block vector\n       * @param {number} x2 - 128-bit input block vector\n       * @param {number} x3 - 128-bit input block vector\n       */\n      function _core(k, s, t, r, x0, x1, x2, x3) {\n        k = k | 0;\n        s = s | 0;\n        t = t | 0;\n        r = r | 0;\n        x0 = x0 | 0;\n        x1 = x1 | 0;\n        x2 = x2 | 0;\n        x3 = x3 | 0;\n\n        var t1 = 0, t2 = 0, t3 = 0,\n          y0 = 0, y1 = 0, y2 = 0, y3 = 0,\n          i = 0;\n\n        t1 = t | 0x400, t2 = t | 0x800, t3 = t | 0xc00;\n\n        // round 0\n        x0 = x0 ^ HEAP[(k | 0) >> 2],\n          x1 = x1 ^ HEAP[(k | 4) >> 2],\n          x2 = x2 ^ HEAP[(k | 8) >> 2],\n          x3 = x3 ^ HEAP[(k | 12) >> 2];\n\n        // round 1..r\n        for (i = 16; (i | 0) <= (r << 4); i = (i + 16) | 0) {\n          y0 = HEAP[(t | x0 >> 22 & 1020) >> 2] ^ HEAP[(t1 | x1 >> 14 & 1020) >> 2] ^ HEAP[(t2 | x2 >> 6 & 1020) >> 2] ^ HEAP[(t3 | x3 << 2 & 1020) >> 2] ^ HEAP[(k | i | 0) >> 2],\n            y1 = HEAP[(t | x1 >> 22 & 1020) >> 2] ^ HEAP[(t1 | x2 >> 14 & 1020) >> 2] ^ HEAP[(t2 | x3 >> 6 & 1020) >> 2] ^ HEAP[(t3 | x0 << 2 & 1020) >> 2] ^ HEAP[(k | i | 4) >> 2],\n            y2 = HEAP[(t | x2 >> 22 & 1020) >> 2] ^ HEAP[(t1 | x3 >> 14 & 1020) >> 2] ^ HEAP[(t2 | x0 >> 6 & 1020) >> 2] ^ HEAP[(t3 | x1 << 2 & 1020) >> 2] ^ HEAP[(k | i | 8) >> 2],\n            y3 = HEAP[(t | x3 >> 22 & 1020) >> 2] ^ HEAP[(t1 | x0 >> 14 & 1020) >> 2] ^ HEAP[(t2 | x1 >> 6 & 1020) >> 2] ^ HEAP[(t3 | x2 << 2 & 1020) >> 2] ^ HEAP[(k | i | 12) >> 2];\n          x0 = y0, x1 = y1, x2 = y2, x3 = y3;\n        }\n\n        // final round\n        S0 = HEAP[(s | x0 >> 22 & 1020) >> 2] << 24 ^ HEAP[(s | x1 >> 14 & 1020) >> 2] << 16 ^ HEAP[(s | x2 >> 6 & 1020) >> 2] << 8 ^ HEAP[(s | x3 << 2 & 1020) >> 2] ^ HEAP[(k | i | 0) >> 2],\n          S1 = HEAP[(s | x1 >> 22 & 1020) >> 2] << 24 ^ HEAP[(s | x2 >> 14 & 1020) >> 2] << 16 ^ HEAP[(s | x3 >> 6 & 1020) >> 2] << 8 ^ HEAP[(s | x0 << 2 & 1020) >> 2] ^ HEAP[(k | i | 4) >> 2],\n          S2 = HEAP[(s | x2 >> 22 & 1020) >> 2] << 24 ^ HEAP[(s | x3 >> 14 & 1020) >> 2] << 16 ^ HEAP[(s | x0 >> 6 & 1020) >> 2] << 8 ^ HEAP[(s | x1 << 2 & 1020) >> 2] ^ HEAP[(k | i | 8) >> 2],\n          S3 = HEAP[(s | x3 >> 22 & 1020) >> 2] << 24 ^ HEAP[(s | x0 >> 14 & 1020) >> 2] << 16 ^ HEAP[(s | x1 >> 6 & 1020) >> 2] << 8 ^ HEAP[(s | x2 << 2 & 1020) >> 2] ^ HEAP[(k | i | 12) >> 2];\n      }\n\n      /**\n       * ECB mode encryption\n       * @param {number} x0 - 128-bit input block vector\n       * @param {number} x1 - 128-bit input block vector\n       * @param {number} x2 - 128-bit input block vector\n       * @param {number} x3 - 128-bit input block vector\n       */\n      // function _ecb_enc(x0, x1, x2, x3) {\n      //   x0 = x0 | 0;\n      //   x1 = x1 | 0;\n      //   x2 = x2 | 0;\n      //   x3 = x3 | 0;\n\n      //   _core(\n      //     0x0000, 0x0800, 0x1000,\n      //     R,\n      //     x0,\n      //     x1,\n      //     x2,\n      //     x3\n      //   );\n      // }\n\n      /**\n       * ECB mode decryption\n       * @param {number} x0 - 128-bit input block vector\n       * @param {number} x1 - 128-bit input block vector\n       * @param {number} x2 - 128-bit input block vector\n       * @param {number} x3 - 128-bit input block vector\n       */\n      // function _ecb_dec(x0, x1, x2, x3) {\n      //   x0 = x0 | 0;\n      //   x1 = x1 | 0;\n      //   x2 = x2 | 0;\n      //   x3 = x3 | 0;\n\n      //   var t = 0;\n\n      //   _core(\n      //     0x0400, 0x0c00, 0x2000,\n      //     R,\n      //     x0,\n      //     x3,\n      //     x2,\n      //     x1\n      //   );\n\n      //   t = S1, S1 = S3, S3 = t;\n      // }\n\n\n      /**\n       * CBC mode encryption\n       * @param {number} x0 - 128-bit input block vector\n       * @param {number} x1 - 128-bit input block vector\n       * @param {number} x2 - 128-bit input block vector\n       * @param {number} x3 - 128-bit input block vector\n       */\n      function _cbc_enc(x0, x1, x2, x3) {\n        x0 = x0 | 0;\n        x1 = x1 | 0;\n        x2 = x2 | 0;\n        x3 = x3 | 0;\n\n        _core(\n          0x0000, 0x0800, 0x1000,\n          R,\n          I0 ^ x0,\n          I1 ^ x1,\n          I2 ^ x2,\n          I3 ^ x3\n        );\n\n        I0 = S0,\n          I1 = S1,\n          I2 = S2,\n          I3 = S3;\n      }\n\n      /**\n       * CBC mode decryption\n       * @param {number} x0 - 128-bit input block vector\n       * @param {number} x1 - 128-bit input block vector\n       * @param {number} x2 - 128-bit input block vector\n       * @param {number} x3 - 128-bit input block vector\n       */\n      function _cbc_dec(x0, x1, x2, x3) {\n        x0 = x0 | 0;\n        x1 = x1 | 0;\n        x2 = x2 | 0;\n        x3 = x3 | 0;\n\n        var t = 0;\n\n        _core(\n          0x0400, 0x0c00, 0x2000,\n          R,\n          x0,\n          x3,\n          x2,\n          x1\n        );\n\n        t = S1, S1 = S3, S3 = t;\n\n        S0 = S0 ^ I0,\n          S1 = S1 ^ I1,\n          S2 = S2 ^ I2,\n          S3 = S3 ^ I3;\n\n        I0 = x0,\n          I1 = x1,\n          I2 = x2,\n          I3 = x3;\n      }\n\n      /**\n       * CFB mode encryption\n       * @param {number} x0 - 128-bit input block vector\n       * @param {number} x1 - 128-bit input block vector\n       * @param {number} x2 - 128-bit input block vector\n       * @param {number} x3 - 128-bit input block vector\n       */\n      // function _cfb_enc(x0, x1, x2, x3) {\n      //   x0 = x0 | 0;\n      //   x1 = x1 | 0;\n      //   x2 = x2 | 0;\n      //   x3 = x3 | 0;\n\n      //   _core(\n      //     0x0000, 0x0800, 0x1000,\n      //     R,\n      //     I0,\n      //     I1,\n      //     I2,\n      //     I3\n      //   );\n\n      //   I0 = S0 = S0 ^ x0,\n      //     I1 = S1 = S1 ^ x1,\n      //     I2 = S2 = S2 ^ x2,\n      //     I3 = S3 = S3 ^ x3;\n      // }\n\n\n      /**\n       * CFB mode decryption\n       * @param {number} x0 - 128-bit input block vector\n       * @param {number} x1 - 128-bit input block vector\n       * @param {number} x2 - 128-bit input block vector\n       * @param {number} x3 - 128-bit input block vector\n       */\n      // function _cfb_dec(x0, x1, x2, x3) {\n      //   x0 = x0 | 0;\n      //   x1 = x1 | 0;\n      //   x2 = x2 | 0;\n      //   x3 = x3 | 0;\n\n      //   _core(\n      //     0x0000, 0x0800, 0x1000,\n      //     R,\n      //     I0,\n      //     I1,\n      //     I2,\n      //     I3\n      //   );\n\n      //   S0 = S0 ^ x0,\n      //     S1 = S1 ^ x1,\n      //     S2 = S2 ^ x2,\n      //     S3 = S3 ^ x3;\n\n      //   I0 = x0,\n      //     I1 = x1,\n      //     I2 = x2,\n      //     I3 = x3;\n      // }\n\n      /**\n       * OFB mode encryption / decryption\n       * @param {number} x0 - 128-bit input block vector\n       * @param {number} x1 - 128-bit input block vector\n       * @param {number} x2 - 128-bit input block vector\n       * @param {number} x3 - 128-bit input block vector\n       */\n      // function _ofb(x0, x1, x2, x3) {\n      //   x0 = x0 | 0;\n      //   x1 = x1 | 0;\n      //   x2 = x2 | 0;\n      //   x3 = x3 | 0;\n\n      //   _core(\n      //     0x0000, 0x0800, 0x1000,\n      //     R,\n      //     I0,\n      //     I1,\n      //     I2,\n      //     I3\n      //   );\n\n      //   I0 = S0,\n      //     I1 = S1,\n      //     I2 = S2,\n      //     I3 = S3;\n\n      //   S0 = S0 ^ x0,\n      //     S1 = S1 ^ x1,\n      //     S2 = S2 ^ x2,\n      //     S3 = S3 ^ x3;\n      // }\n\n      /**\n       * CTR mode encryption / decryption\n       * @param {number} x0 - 128-bit input block vector\n       * @param {number} x1 - 128-bit input block vector\n       * @param {number} x2 - 128-bit input block vector\n       * @param {number} x3 - 128-bit input block vector\n       */\n      // function _ctr(x0, x1, x2, x3) {\n      //   x0 = x0 | 0;\n      //   x1 = x1 | 0;\n      //   x2 = x2 | 0;\n      //   x3 = x3 | 0;\n\n      //   _core(\n      //     0x0000, 0x0800, 0x1000,\n      //     R,\n      //     N0,\n      //     N1,\n      //     N2,\n      //     N3\n      //   );\n\n      //   N3 = (~M3 & N3) | M3 & (N3 + 1);\n      //     N2 = (~M2 & N2) | M2 & (N2 + ((N3 | 0) == 0));\n      //     N1 = (~M1 & N1) | M1 & (N1 + ((N2 | 0) == 0));\n      //     N0 = (~M0 & N0) | M0 & (N0 + ((N1 | 0) == 0));\n\n      //   S0 = S0 ^ x0;\n      //     S1 = S1 ^ x1;\n      //     S2 = S2 ^ x2;\n      //     S3 = S3 ^ x3;\n      // }\n\n      /**\n       * GCM mode MAC calculation\n       * @param {number} x0 - 128-bit input block vector\n       * @param {number} x1 - 128-bit input block vector\n       * @param {number} x2 - 128-bit input block vector\n       * @param {number} x3 - 128-bit input block vector\n       */\n      function _gcm_mac(x0, x1, x2, x3) {\n        x0 = x0 | 0;\n        x1 = x1 | 0;\n        x2 = x2 | 0;\n        x3 = x3 | 0;\n\n        var y0 = 0, y1 = 0, y2 = 0, y3 = 0,\n          z0 = 0, z1 = 0, z2 = 0, z3 = 0,\n          i = 0, c = 0;\n\n        x0 = x0 ^ I0,\n          x1 = x1 ^ I1,\n          x2 = x2 ^ I2,\n          x3 = x3 ^ I3;\n\n        y0 = H0 | 0,\n          y1 = H1 | 0,\n          y2 = H2 | 0,\n          y3 = H3 | 0;\n\n        for (; (i | 0) < 128; i = (i + 1) | 0) {\n          if (y0 >>> 31) {\n            z0 = z0 ^ x0,\n              z1 = z1 ^ x1,\n              z2 = z2 ^ x2,\n              z3 = z3 ^ x3;\n          }\n\n          y0 = (y0 << 1) | (y1 >>> 31),\n            y1 = (y1 << 1) | (y2 >>> 31),\n            y2 = (y2 << 1) | (y3 >>> 31),\n            y3 = (y3 << 1);\n\n          c = x3 & 1;\n\n          x3 = (x3 >>> 1) | (x2 << 31),\n            x2 = (x2 >>> 1) | (x1 << 31),\n            x1 = (x1 >>> 1) | (x0 << 31),\n            x0 = (x0 >>> 1);\n\n          if (c) x0 = x0 ^ 0xe1000000;\n        }\n\n        I0 = z0,\n          I1 = z1,\n          I2 = z2,\n          I3 = z3;\n      }\n\n      /**\n       * Set the internal rounds number.\n       * @instance\n       * @memberof AES_asm\n       * @param {number} r - number if inner AES rounds\n       */\n      function set_rounds(r) {\n        r = r | 0;\n        R = r;\n      }\n\n      /**\n       * Populate the internal state of the module.\n       * @instance\n       * @memberof AES_asm\n       * @param {number} s0 - state vector\n       * @param {number} s1 - state vector\n       * @param {number} s2 - state vector\n       * @param {number} s3 - state vector\n       */\n      function set_state(s0, s1, s2, s3) {\n        s0 = s0 | 0;\n        s1 = s1 | 0;\n        s2 = s2 | 0;\n        s3 = s3 | 0;\n\n        S0 = s0,\n          S1 = s1,\n          S2 = s2,\n          S3 = s3;\n      }\n\n      /**\n       * Populate the internal iv of the module.\n       * @instance\n       * @memberof AES_asm\n       * @param {number} i0 - iv vector\n       * @param {number} i1 - iv vector\n       * @param {number} i2 - iv vector\n       * @param {number} i3 - iv vector\n       */\n      function set_iv(i0, i1, i2, i3) {\n        i0 = i0 | 0;\n        i1 = i1 | 0;\n        i2 = i2 | 0;\n        i3 = i3 | 0;\n\n        I0 = i0,\n          I1 = i1,\n          I2 = i2,\n          I3 = i3;\n      }\n\n      /**\n       * Set nonce for CTR-family modes.\n       * @instance\n       * @memberof AES_asm\n       * @param {number} n0 - nonce vector\n       * @param {number} n1 - nonce vector\n       * @param {number} n2 - nonce vector\n       * @param {number} n3 - nonce vector\n       */\n      function set_nonce(n0, n1, n2, n3) {\n        n0 = n0 | 0;\n        n1 = n1 | 0;\n        n2 = n2 | 0;\n        n3 = n3 | 0;\n\n        N0 = n0,\n          N1 = n1,\n          N2 = n2,\n          N3 = n3;\n      }\n\n      /**\n       * Set counter mask for CTR-family modes.\n       * @instance\n       * @memberof AES_asm\n       * @param {number} m0 - counter mask vector\n       * @param {number} m1 - counter mask vector\n       * @param {number} m2 - counter mask vector\n       * @param {number} m3 - counter mask vector\n       */\n      function set_mask(m0, m1, m2, m3) {\n        m0 = m0 | 0;\n        m1 = m1 | 0;\n        m2 = m2 | 0;\n        m3 = m3 | 0;\n\n        M0 = m0,\n          M1 = m1,\n          M2 = m2,\n          M3 = m3;\n      }\n\n      /**\n       * Set counter for CTR-family modes.\n       * @instance\n       * @memberof AES_asm\n       * @param {number} c0 - counter vector\n       * @param {number} c1 - counter vector\n       * @param {number} c2 - counter vector\n       * @param {number} c3 - counter vector\n       */\n      function set_counter(c0, c1, c2, c3) {\n        c0 = c0 | 0;\n        c1 = c1 | 0;\n        c2 = c2 | 0;\n        c3 = c3 | 0;\n\n        N3 = (~M3 & N3) | M3 & c3,\n          N2 = (~M2 & N2) | M2 & c2,\n          N1 = (~M1 & N1) | M1 & c1,\n          N0 = (~M0 & N0) | M0 & c0;\n      }\n\n      /**\n       * Store the internal state vector into the heap.\n       * @instance\n       * @memberof AES_asm\n       * @param {number} pos - offset where to put the data\n       * @return {number} The number of bytes have been written into the heap, always 16.\n       */\n      function get_state(pos) {\n        pos = pos | 0;\n\n        if (pos & 15) return -1;\n\n        DATA[pos | 0] = S0 >>> 24,\n          DATA[pos | 1] = S0 >>> 16 & 255,\n          DATA[pos | 2] = S0 >>> 8 & 255,\n          DATA[pos | 3] = S0 & 255,\n          DATA[pos | 4] = S1 >>> 24,\n          DATA[pos | 5] = S1 >>> 16 & 255,\n          DATA[pos | 6] = S1 >>> 8 & 255,\n          DATA[pos | 7] = S1 & 255,\n          DATA[pos | 8] = S2 >>> 24,\n          DATA[pos | 9] = S2 >>> 16 & 255,\n          DATA[pos | 10] = S2 >>> 8 & 255,\n          DATA[pos | 11] = S2 & 255,\n          DATA[pos | 12] = S3 >>> 24,\n          DATA[pos | 13] = S3 >>> 16 & 255,\n          DATA[pos | 14] = S3 >>> 8 & 255,\n          DATA[pos | 15] = S3 & 255;\n\n        return 16;\n      }\n\n      /**\n       * Store the internal iv vector into the heap.\n       * @instance\n       * @memberof AES_asm\n       * @param {number} pos - offset where to put the data\n       * @return {number} The number of bytes have been written into the heap, always 16.\n       */\n      function get_iv(pos) {\n        pos = pos | 0;\n\n        if (pos & 15) return -1;\n\n        DATA[pos | 0] = I0 >>> 24,\n          DATA[pos | 1] = I0 >>> 16 & 255,\n          DATA[pos | 2] = I0 >>> 8 & 255,\n          DATA[pos | 3] = I0 & 255,\n          DATA[pos | 4] = I1 >>> 24,\n          DATA[pos | 5] = I1 >>> 16 & 255,\n          DATA[pos | 6] = I1 >>> 8 & 255,\n          DATA[pos | 7] = I1 & 255,\n          DATA[pos | 8] = I2 >>> 24,\n          DATA[pos | 9] = I2 >>> 16 & 255,\n          DATA[pos | 10] = I2 >>> 8 & 255,\n          DATA[pos | 11] = I2 & 255,\n          DATA[pos | 12] = I3 >>> 24,\n          DATA[pos | 13] = I3 >>> 16 & 255,\n          DATA[pos | 14] = I3 >>> 8 & 255,\n          DATA[pos | 15] = I3 & 255;\n\n        return 16;\n      }\n\n      /**\n       * GCM initialization.\n       * @instance\n       * @memberof AES_asm\n       */\n      // function gcm_init() {\n      //   _ecb_enc(0, 0, 0, 0);\n      //   H0 = S0,\n      //     H1 = S1,\n      //     H2 = S2,\n      //     H3 = S3;\n      // }\n\n      /**\n       * Perform ciphering operation on the supplied data.\n       * @instance\n       * @memberof AES_asm\n       * @param {number} mode - block cipher mode (see {@link AES_asm} mode constants)\n       * @param {number} pos - offset of the data being processed\n       * @param {number} len - length of the data being processed\n       * @return {number} Actual amount of data have been processed.\n       */\n      function cipher(mode, pos, len) {\n        mode = mode | 0;\n        pos = pos | 0;\n        len = len | 0;\n\n        var ret = 0;\n\n        if (pos & 15) return -1;\n\n        while ((len | 0) >= 16) {\n          _cipher_modes[mode & 7](\n            DATA[pos | 0] << 24 | DATA[pos | 1] << 16 | DATA[pos | 2] << 8 | DATA[pos | 3],\n            DATA[pos | 4] << 24 | DATA[pos | 5] << 16 | DATA[pos | 6] << 8 | DATA[pos | 7],\n            DATA[pos | 8] << 24 | DATA[pos | 9] << 16 | DATA[pos | 10] << 8 | DATA[pos | 11],\n            DATA[pos | 12] << 24 | DATA[pos | 13] << 16 | DATA[pos | 14] << 8 | DATA[pos | 15]\n          );\n\n          DATA[pos | 0] = S0 >>> 24,\n            DATA[pos | 1] = S0 >>> 16 & 255,\n            DATA[pos | 2] = S0 >>> 8 & 255,\n            DATA[pos | 3] = S0 & 255,\n            DATA[pos | 4] = S1 >>> 24,\n            DATA[pos | 5] = S1 >>> 16 & 255,\n            DATA[pos | 6] = S1 >>> 8 & 255,\n            DATA[pos | 7] = S1 & 255,\n            DATA[pos | 8] = S2 >>> 24,\n            DATA[pos | 9] = S2 >>> 16 & 255,\n            DATA[pos | 10] = S2 >>> 8 & 255,\n            DATA[pos | 11] = S2 & 255,\n            DATA[pos | 12] = S3 >>> 24,\n            DATA[pos | 13] = S3 >>> 16 & 255,\n            DATA[pos | 14] = S3 >>> 8 & 255,\n            DATA[pos | 15] = S3 & 255;\n\n          ret = (ret + 16) | 0,\n            pos = (pos + 16) | 0,\n            len = (len - 16) | 0;\n        }\n\n        return ret | 0;\n      }\n\n      /**\n       * Calculates MAC of the supplied data.\n       * @instance\n       * @memberof AES_asm\n       * @param {number} mode - block cipher mode (see {@link AES_asm} mode constants)\n       * @param {number} pos - offset of the data being processed\n       * @param {number} len - length of the data being processed\n       * @return {number} Actual amount of data have been processed.\n       */\n      function mac(mode, pos, len) {\n        mode = mode | 0;\n        pos = pos | 0;\n        len = len | 0;\n\n        var ret = 0;\n\n        if (pos & 15) return -1;\n\n        while ((len | 0) >= 16) {\n          _mac_modes[mode & 1](\n            DATA[pos | 0] << 24 | DATA[pos | 1] << 16 | DATA[pos | 2] << 8 | DATA[pos | 3],\n            DATA[pos | 4] << 24 | DATA[pos | 5] << 16 | DATA[pos | 6] << 8 | DATA[pos | 7],\n            DATA[pos | 8] << 24 | DATA[pos | 9] << 16 | DATA[pos | 10] << 8 | DATA[pos | 11],\n            DATA[pos | 12] << 24 | DATA[pos | 13] << 16 | DATA[pos | 14] << 8 | DATA[pos | 15]\n          );\n\n          ret = (ret + 16) | 0,\n            pos = (pos + 16) | 0,\n            len = (len - 16) | 0;\n        }\n\n        return ret | 0;\n      }\n\n      /**\n       * AES cipher modes table (virual methods)\n       */\n      var _cipher_modes = [_cbc_enc, _cbc_enc, _cbc_enc, _cbc_dec, _cbc_dec, _cbc_dec, _cbc_dec, _cbc_dec];\n\n      /**\n       * AES MAC modes table (virual methods)\n       */\n      var _mac_modes = [_cbc_enc, _cbc_enc];\n\n      /**\n       * Asm.js module exports\n       */\n      return {\n        set_rounds: set_rounds,\n        set_state: set_state,\n        set_iv: set_iv,\n        set_nonce: set_nonce,\n        set_mask: set_mask,\n        set_counter: set_counter,\n        get_state: get_state,\n        get_iv: get_iv,\n        // gcm_init: gcm_init,\n        cipher: cipher,\n        mac: mac,\n      };\n    }(stdlib, foreign, buffer);\n\n    asm.set_key = set_key;\n\n    return asm;\n  };\n\n  /**\n   * AES enciphering mode constants\n   * @enum {number}\n   * @const\n   */\n  wrapper.ENC = {\n    //ECB: 0,\n    CBC: 2,\n    //CFB: 4,\n    //OFB: 6,\n    // CTR: 7,\n  },\n\n    /**\n     * AES deciphering mode constants\n     * @enum {number}\n     * @const\n     */\n    wrapper.DEC = {\n      //ECB: 1,\n      CBC: 3,\n      //CFB: 5,\n      //OFB: 6,\n      // CTR: 7,\n    },\n\n    /**\n     * AES MAC mode constants\n     * @enum {number}\n     * @const\n     */\n    wrapper.MAC = {\n      CBC: 0,\n      //GCM: 1,\n    };\n\n  /**\n   * Heap data offset\n   * @type {number}\n   * @const\n   */\n  wrapper.HEAP_DATA = 0x4000;\n\n  return wrapper;\n}();\n", null, null, null],
  "mappings": "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",
  "names": ["s", "i", "stdlib", "foreign", "buffer"]
}
